// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mediapipe/modules/face_geometry/protos/mesh_3d.proto

package com.google.mediapipe.modules.facegeometry;

public final class Mesh3dProto {
    private Mesh3dProto() {}
    public static void registerAllExtensions(
            com.google.protobuf.ExtensionRegistryLite registry) {
    }
    public interface Mesh3dOrBuilder extends
            // @@protoc_insertion_point(interface_extends:mediapipe.face_geometry.Mesh3d)
            com.google.protobuf.MessageLiteOrBuilder {

        /**
         * <code>optional .mediapipe.face_geometry.Mesh3d.VertexType vertex_type = 1;</code>
         * @return Whether the vertexType field is set.
         */
        boolean hasVertexType();
        /**
         * <code>optional .mediapipe.face_geometry.Mesh3d.VertexType vertex_type = 1;</code>
         * @return The vertexType.
         */
        com.google.mediapipe.modules.facegeometry.Mesh3dProto.Mesh3d.VertexType getVertexType();

        /**
         * <code>optional .mediapipe.face_geometry.Mesh3d.PrimitiveType primitive_type = 2;</code>
         * @return Whether the primitiveType field is set.
         */
        boolean hasPrimitiveType();
        /**
         * <code>optional .mediapipe.face_geometry.Mesh3d.PrimitiveType primitive_type = 2;</code>
         * @return The primitiveType.
         */
        com.google.mediapipe.modules.facegeometry.Mesh3dProto.Mesh3d.PrimitiveType getPrimitiveType();

        /**
         * <pre>
         * Vertex buffer size is a multiple of the vertex size (e.g., 5 for
         * VERTEX_PT).
         * </pre>
         *
         * <code>repeated float vertex_buffer = 3;</code>
         * @return A list containing the vertexBuffer.
         */
        java.util.List<java.lang.Float> getVertexBufferList();
        /**
         * <pre>
         * Vertex buffer size is a multiple of the vertex size (e.g., 5 for
         * VERTEX_PT).
         * </pre>
         *
         * <code>repeated float vertex_buffer = 3;</code>
         * @return The count of vertexBuffer.
         */
        int getVertexBufferCount();
        /**
         * <pre>
         * Vertex buffer size is a multiple of the vertex size (e.g., 5 for
         * VERTEX_PT).
         * </pre>
         *
         * <code>repeated float vertex_buffer = 3;</code>
         * @param index The index of the element to return.
         * @return The vertexBuffer at the given index.
         */
        float getVertexBuffer(int index);

        /**
         * <pre>
         * Index buffer size is a multiple of the primitive size (e.g., 3 for
         * TRIANGLE).
         * </pre>
         *
         * <code>repeated uint32 index_buffer = 4;</code>
         * @return A list containing the indexBuffer.
         */
        java.util.List<java.lang.Integer> getIndexBufferList();
        /**
         * <pre>
         * Index buffer size is a multiple of the primitive size (e.g., 3 for
         * TRIANGLE).
         * </pre>
         *
         * <code>repeated uint32 index_buffer = 4;</code>
         * @return The count of indexBuffer.
         */
        int getIndexBufferCount();
        /**
         * <pre>
         * Index buffer size is a multiple of the primitive size (e.g., 3 for
         * TRIANGLE).
         * </pre>
         *
         * <code>repeated uint32 index_buffer = 4;</code>
         * @param index The index of the element to return.
         * @return The indexBuffer at the given index.
         */
        int getIndexBuffer(int index);
    }
    /**
     * Protobuf type {@code mediapipe.face_geometry.Mesh3d}
     */
    public  static final class Mesh3d extends
            com.google.protobuf.GeneratedMessageLite<
                    Mesh3d, Mesh3d.Builder> implements
            // @@protoc_insertion_point(message_implements:mediapipe.face_geometry.Mesh3d)
            Mesh3dOrBuilder {
        private Mesh3d() {
            vertexBuffer_ = emptyFloatList();
            indexBuffer_ = emptyIntList();
        }
        /**
         * Protobuf enum {@code mediapipe.face_geometry.Mesh3d.VertexType}
         */
        public enum VertexType
                implements com.google.protobuf.Internal.EnumLite {
            /**
             * <pre>
             * Is defined by 5 coordinates: Position (XYZ) + Texture coordinate (UV).
             * </pre>
             *
             * <code>VERTEX_PT = 0;</code>
             */
            VERTEX_PT(0),
            ;

            /**
             * <pre>
             * Is defined by 5 coordinates: Position (XYZ) + Texture coordinate (UV).
             * </pre>
             *
             * <code>VERTEX_PT = 0;</code>
             */
            public static final int VERTEX_PT_VALUE = 0;


            @java.lang.Override
            public final int getNumber() {
                return value;
            }

            /**
             * @param value The number of the enum to look for.
             * @return The enum associated with the given number.
             * @deprecated Use {@link #forNumber(int)} instead.
             */
            @java.lang.Deprecated
            public static VertexType valueOf(int value) {
                return forNumber(value);
            }

            public static VertexType forNumber(int value) {
                switch (value) {
                    case 0: return VERTEX_PT;
                    default: return null;
                }
            }

            public static com.google.protobuf.Internal.EnumLiteMap<VertexType>
            internalGetValueMap() {
                return internalValueMap;
            }
            private static final com.google.protobuf.Internal.EnumLiteMap<
                    VertexType> internalValueMap =
                    new com.google.protobuf.Internal.EnumLiteMap<VertexType>() {
                        @java.lang.Override
                        public VertexType findValueByNumber(int number) {
                            return VertexType.forNumber(number);
                        }
                    };

            public static com.google.protobuf.Internal.EnumVerifier
            internalGetVerifier() {
                return VertexTypeVerifier.INSTANCE;
            }

            private static final class VertexTypeVerifier implements
                    com.google.protobuf.Internal.EnumVerifier {
                static final com.google.protobuf.Internal.EnumVerifier           INSTANCE = new VertexTypeVerifier();
                @java.lang.Override
                public boolean isInRange(int number) {
                    return VertexType.forNumber(number) != null;
                }
            };

            private final int value;

            private VertexType(int value) {
                this.value = value;
            }

            // @@protoc_insertion_point(enum_scope:mediapipe.face_geometry.Mesh3d.VertexType)
        }

        /**
         * Protobuf enum {@code mediapipe.face_geometry.Mesh3d.PrimitiveType}
         */
        public enum PrimitiveType
                implements com.google.protobuf.Internal.EnumLite {
            /**
             * <pre>
             * Is defined by 3 indices: triangle vertex IDs.
             * </pre>
             *
             * <code>TRIANGLE = 0;</code>
             */
            TRIANGLE(0),
            ;

            /**
             * <pre>
             * Is defined by 3 indices: triangle vertex IDs.
             * </pre>
             *
             * <code>TRIANGLE = 0;</code>
             */
            public static final int TRIANGLE_VALUE = 0;


            @java.lang.Override
            public final int getNumber() {
                return value;
            }

            /**
             * @param value The number of the enum to look for.
             * @return The enum associated with the given number.
             * @deprecated Use {@link #forNumber(int)} instead.
             */
            @java.lang.Deprecated
            public static PrimitiveType valueOf(int value) {
                return forNumber(value);
            }

            public static PrimitiveType forNumber(int value) {
                switch (value) {
                    case 0: return TRIANGLE;
                    default: return null;
                }
            }

            public static com.google.protobuf.Internal.EnumLiteMap<PrimitiveType>
            internalGetValueMap() {
                return internalValueMap;
            }
            private static final com.google.protobuf.Internal.EnumLiteMap<
                    PrimitiveType> internalValueMap =
                    new com.google.protobuf.Internal.EnumLiteMap<PrimitiveType>() {
                        @java.lang.Override
                        public PrimitiveType findValueByNumber(int number) {
                            return PrimitiveType.forNumber(number);
                        }
                    };

            public static com.google.protobuf.Internal.EnumVerifier
            internalGetVerifier() {
                return PrimitiveTypeVerifier.INSTANCE;
            }

            private static final class PrimitiveTypeVerifier implements
                    com.google.protobuf.Internal.EnumVerifier {
                static final com.google.protobuf.Internal.EnumVerifier           INSTANCE = new PrimitiveTypeVerifier();
                @java.lang.Override
                public boolean isInRange(int number) {
                    return PrimitiveType.forNumber(number) != null;
                }
            };

            private final int value;

            private PrimitiveType(int value) {
                this.value = value;
            }

            // @@protoc_insertion_point(enum_scope:mediapipe.face_geometry.Mesh3d.PrimitiveType)
        }

        private int bitField0_;
        public static final int VERTEX_TYPE_FIELD_NUMBER = 1;
        private int vertexType_;
        /**
         * <code>optional .mediapipe.face_geometry.Mesh3d.VertexType vertex_type = 1;</code>
         * @return Whether the vertexType field is set.
         */
        @java.lang.Override
        public boolean hasVertexType() {
            return ((bitField0_ & 0x00000001) != 0);
        }
        /**
         * <code>optional .mediapipe.face_geometry.Mesh3d.VertexType vertex_type = 1;</code>
         * @return The vertexType.
         */
        @java.lang.Override
        public com.google.mediapipe.modules.facegeometry.Mesh3dProto.Mesh3d.VertexType getVertexType() {
            com.google.mediapipe.modules.facegeometry.Mesh3dProto.Mesh3d.VertexType result = com.google.mediapipe.modules.facegeometry.Mesh3dProto.Mesh3d.VertexType.forNumber(vertexType_);
            return result == null ? com.google.mediapipe.modules.facegeometry.Mesh3dProto.Mesh3d.VertexType.VERTEX_PT : result;
        }
        /**
         * <code>optional .mediapipe.face_geometry.Mesh3d.VertexType vertex_type = 1;</code>
         * @param value The vertexType to set.
         */
        private void setVertexType(com.google.mediapipe.modules.facegeometry.Mesh3dProto.Mesh3d.VertexType value) {
            vertexType_ = value.getNumber();
            bitField0_ |= 0x00000001;
        }
        /**
         * <code>optional .mediapipe.face_geometry.Mesh3d.VertexType vertex_type = 1;</code>
         */
        private void clearVertexType() {
            bitField0_ = (bitField0_ & ~0x00000001);
            vertexType_ = 0;
        }

        public static final int PRIMITIVE_TYPE_FIELD_NUMBER = 2;
        private int primitiveType_;
        /**
         * <code>optional .mediapipe.face_geometry.Mesh3d.PrimitiveType primitive_type = 2;</code>
         * @return Whether the primitiveType field is set.
         */
        @java.lang.Override
        public boolean hasPrimitiveType() {
            return ((bitField0_ & 0x00000002) != 0);
        }
        /**
         * <code>optional .mediapipe.face_geometry.Mesh3d.PrimitiveType primitive_type = 2;</code>
         * @return The primitiveType.
         */
        @java.lang.Override
        public com.google.mediapipe.modules.facegeometry.Mesh3dProto.Mesh3d.PrimitiveType getPrimitiveType() {
            com.google.mediapipe.modules.facegeometry.Mesh3dProto.Mesh3d.PrimitiveType result = com.google.mediapipe.modules.facegeometry.Mesh3dProto.Mesh3d.PrimitiveType.forNumber(primitiveType_);
            return result == null ? com.google.mediapipe.modules.facegeometry.Mesh3dProto.Mesh3d.PrimitiveType.TRIANGLE : result;
        }
        /**
         * <code>optional .mediapipe.face_geometry.Mesh3d.PrimitiveType primitive_type = 2;</code>
         * @param value The primitiveType to set.
         */
        private void setPrimitiveType(com.google.mediapipe.modules.facegeometry.Mesh3dProto.Mesh3d.PrimitiveType value) {
            primitiveType_ = value.getNumber();
            bitField0_ |= 0x00000002;
        }
        /**
         * <code>optional .mediapipe.face_geometry.Mesh3d.PrimitiveType primitive_type = 2;</code>
         */
        private void clearPrimitiveType() {
            bitField0_ = (bitField0_ & ~0x00000002);
            primitiveType_ = 0;
        }

        public static final int VERTEX_BUFFER_FIELD_NUMBER = 3;
        private com.google.protobuf.Internal.FloatList vertexBuffer_;
        /**
         * <pre>
         * Vertex buffer size is a multiple of the vertex size (e.g., 5 for
         * VERTEX_PT).
         * </pre>
         *
         * <code>repeated float vertex_buffer = 3;</code>
         * @return A list containing the vertexBuffer.
         */
        @java.lang.Override
        public java.util.List<java.lang.Float>
        getVertexBufferList() {
            return vertexBuffer_;
        }
        /**
         * <pre>
         * Vertex buffer size is a multiple of the vertex size (e.g., 5 for
         * VERTEX_PT).
         * </pre>
         *
         * <code>repeated float vertex_buffer = 3;</code>
         * @return The count of vertexBuffer.
         */
        @java.lang.Override
        public int getVertexBufferCount() {
            return vertexBuffer_.size();
        }
        /**
         * <pre>
         * Vertex buffer size is a multiple of the vertex size (e.g., 5 for
         * VERTEX_PT).
         * </pre>
         *
         * <code>repeated float vertex_buffer = 3;</code>
         * @param index The index of the element to return.
         * @return The vertexBuffer at the given index.
         */
        @java.lang.Override
        public float getVertexBuffer(int index) {
            return vertexBuffer_.getFloat(index);
        }
        private void ensureVertexBufferIsMutable() {
            if (!vertexBuffer_.isModifiable()) {
                vertexBuffer_ =
                        com.google.protobuf.GeneratedMessageLite.mutableCopy(vertexBuffer_);
            }
        }
        /**
         * <pre>
         * Vertex buffer size is a multiple of the vertex size (e.g., 5 for
         * VERTEX_PT).
         * </pre>
         *
         * <code>repeated float vertex_buffer = 3;</code>
         * @param index The index to set the value at.
         * @param value The vertexBuffer to set.
         */
        private void setVertexBuffer(
                int index, float value) {
            ensureVertexBufferIsMutable();
            vertexBuffer_.setFloat(index, value);
        }
        /**
         * <pre>
         * Vertex buffer size is a multiple of the vertex size (e.g., 5 for
         * VERTEX_PT).
         * </pre>
         *
         * <code>repeated float vertex_buffer = 3;</code>
         * @param value The vertexBuffer to add.
         */
        private void addVertexBuffer(float value) {
            ensureVertexBufferIsMutable();
            vertexBuffer_.addFloat(value);
        }
        /**
         * <pre>
         * Vertex buffer size is a multiple of the vertex size (e.g., 5 for
         * VERTEX_PT).
         * </pre>
         *
         * <code>repeated float vertex_buffer = 3;</code>
         * @param values The vertexBuffer to add.
         */
        private void addAllVertexBuffer(
                java.lang.Iterable<? extends java.lang.Float> values) {
            ensureVertexBufferIsMutable();
            com.google.protobuf.AbstractMessageLite.addAll(
                    values, vertexBuffer_);
        }
        /**
         * <pre>
         * Vertex buffer size is a multiple of the vertex size (e.g., 5 for
         * VERTEX_PT).
         * </pre>
         *
         * <code>repeated float vertex_buffer = 3;</code>
         */
        private void clearVertexBuffer() {
            vertexBuffer_ = emptyFloatList();
        }

        public static final int INDEX_BUFFER_FIELD_NUMBER = 4;
        private com.google.protobuf.Internal.IntList indexBuffer_;
        /**
         * <pre>
         * Index buffer size is a multiple of the primitive size (e.g., 3 for
         * TRIANGLE).
         * </pre>
         *
         * <code>repeated uint32 index_buffer = 4;</code>
         * @return A list containing the indexBuffer.
         */
        @java.lang.Override
        public java.util.List<java.lang.Integer>
        getIndexBufferList() {
            return indexBuffer_;
        }
        /**
         * <pre>
         * Index buffer size is a multiple of the primitive size (e.g., 3 for
         * TRIANGLE).
         * </pre>
         *
         * <code>repeated uint32 index_buffer = 4;</code>
         * @return The count of indexBuffer.
         */
        @java.lang.Override
        public int getIndexBufferCount() {
            return indexBuffer_.size();
        }
        /**
         * <pre>
         * Index buffer size is a multiple of the primitive size (e.g., 3 for
         * TRIANGLE).
         * </pre>
         *
         * <code>repeated uint32 index_buffer = 4;</code>
         * @param index The index of the element to return.
         * @return The indexBuffer at the given index.
         */
        @java.lang.Override
        public int getIndexBuffer(int index) {
            return indexBuffer_.getInt(index);
        }
        private void ensureIndexBufferIsMutable() {
            if (!indexBuffer_.isModifiable()) {
                indexBuffer_ =
                        com.google.protobuf.GeneratedMessageLite.mutableCopy(indexBuffer_);
            }
        }
        /**
         * <pre>
         * Index buffer size is a multiple of the primitive size (e.g., 3 for
         * TRIANGLE).
         * </pre>
         *
         * <code>repeated uint32 index_buffer = 4;</code>
         * @param index The index to set the value at.
         * @param value The indexBuffer to set.
         */
        private void setIndexBuffer(
                int index, int value) {
            ensureIndexBufferIsMutable();
            indexBuffer_.setInt(index, value);
        }
        /**
         * <pre>
         * Index buffer size is a multiple of the primitive size (e.g., 3 for
         * TRIANGLE).
         * </pre>
         *
         * <code>repeated uint32 index_buffer = 4;</code>
         * @param value The indexBuffer to add.
         */
        private void addIndexBuffer(int value) {
            ensureIndexBufferIsMutable();
            indexBuffer_.addInt(value);
        }
        /**
         * <pre>
         * Index buffer size is a multiple of the primitive size (e.g., 3 for
         * TRIANGLE).
         * </pre>
         *
         * <code>repeated uint32 index_buffer = 4;</code>
         * @param values The indexBuffer to add.
         */
        private void addAllIndexBuffer(
                java.lang.Iterable<? extends java.lang.Integer> values) {
            ensureIndexBufferIsMutable();
            com.google.protobuf.AbstractMessageLite.addAll(
                    values, indexBuffer_);
        }
        /**
         * <pre>
         * Index buffer size is a multiple of the primitive size (e.g., 3 for
         * TRIANGLE).
         * </pre>
         *
         * <code>repeated uint32 index_buffer = 4;</code>
         */
        private void clearIndexBuffer() {
            indexBuffer_ = emptyIntList();
        }

        public static com.google.mediapipe.modules.facegeometry.Mesh3dProto.Mesh3d parseFrom(
                java.nio.ByteBuffer data)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return com.google.protobuf.GeneratedMessageLite.parseFrom(
                    DEFAULT_INSTANCE, data);
        }
        public static com.google.mediapipe.modules.facegeometry.Mesh3dProto.Mesh3d parseFrom(
                java.nio.ByteBuffer data,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return com.google.protobuf.GeneratedMessageLite.parseFrom(
                    DEFAULT_INSTANCE, data, extensionRegistry);
        }
        public static com.google.mediapipe.modules.facegeometry.Mesh3dProto.Mesh3d parseFrom(
                com.google.protobuf.ByteString data)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return com.google.protobuf.GeneratedMessageLite.parseFrom(
                    DEFAULT_INSTANCE, data);
        }
        public static com.google.mediapipe.modules.facegeometry.Mesh3dProto.Mesh3d parseFrom(
                com.google.protobuf.ByteString data,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return com.google.protobuf.GeneratedMessageLite.parseFrom(
                    DEFAULT_INSTANCE, data, extensionRegistry);
        }
        public static com.google.mediapipe.modules.facegeometry.Mesh3dProto.Mesh3d parseFrom(byte[] data)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return com.google.protobuf.GeneratedMessageLite.parseFrom(
                    DEFAULT_INSTANCE, data);
        }
        public static com.google.mediapipe.modules.facegeometry.Mesh3dProto.Mesh3d parseFrom(
                byte[] data,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return com.google.protobuf.GeneratedMessageLite.parseFrom(
                    DEFAULT_INSTANCE, data, extensionRegistry);
        }
        public static com.google.mediapipe.modules.facegeometry.Mesh3dProto.Mesh3d parseFrom(java.io.InputStream input)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageLite.parseFrom(
                    DEFAULT_INSTANCE, input);
        }
        public static com.google.mediapipe.modules.facegeometry.Mesh3dProto.Mesh3d parseFrom(
                java.io.InputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageLite.parseFrom(
                    DEFAULT_INSTANCE, input, extensionRegistry);
        }
        public static com.google.mediapipe.modules.facegeometry.Mesh3dProto.Mesh3d parseDelimitedFrom(java.io.InputStream input)
                throws java.io.IOException {
            return parseDelimitedFrom(DEFAULT_INSTANCE, input);
        }
        public static com.google.mediapipe.modules.facegeometry.Mesh3dProto.Mesh3d parseDelimitedFrom(
                java.io.InputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
        }
        public static com.google.mediapipe.modules.facegeometry.Mesh3dProto.Mesh3d parseFrom(
                com.google.protobuf.CodedInputStream input)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageLite.parseFrom(
                    DEFAULT_INSTANCE, input);
        }
        public static com.google.mediapipe.modules.facegeometry.Mesh3dProto.Mesh3d parseFrom(
                com.google.protobuf.CodedInputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageLite.parseFrom(
                    DEFAULT_INSTANCE, input, extensionRegistry);
        }

        public static Builder newBuilder() {
            return (Builder) DEFAULT_INSTANCE.createBuilder();
        }
        public static Builder newBuilder(com.google.mediapipe.modules.facegeometry.Mesh3dProto.Mesh3d prototype) {
            return (Builder) DEFAULT_INSTANCE.createBuilder(prototype);
        }

        /**
         * Protobuf type {@code mediapipe.face_geometry.Mesh3d}
         */
        public static final class Builder extends
                com.google.protobuf.GeneratedMessageLite.Builder<
                        com.google.mediapipe.modules.facegeometry.Mesh3dProto.Mesh3d, Builder> implements
                // @@protoc_insertion_point(builder_implements:mediapipe.face_geometry.Mesh3d)
                com.google.mediapipe.modules.facegeometry.Mesh3dProto.Mesh3dOrBuilder {
            // Construct using com.google.mediapipe.modules.facegeometry.Mesh3dProto.Mesh3d.newBuilder()
            private Builder() {
                super(DEFAULT_INSTANCE);
            }


            /**
             * <code>optional .mediapipe.face_geometry.Mesh3d.VertexType vertex_type = 1;</code>
             * @return Whether the vertexType field is set.
             */
            @java.lang.Override
            public boolean hasVertexType() {
                return instance.hasVertexType();
            }
            /**
             * <code>optional .mediapipe.face_geometry.Mesh3d.VertexType vertex_type = 1;</code>
             * @return The vertexType.
             */
            @java.lang.Override
            public com.google.mediapipe.modules.facegeometry.Mesh3dProto.Mesh3d.VertexType getVertexType() {
                return instance.getVertexType();
            }
            /**
             * <code>optional .mediapipe.face_geometry.Mesh3d.VertexType vertex_type = 1;</code>
             * @param value The enum numeric value on the wire for vertexType to set.
             * @return This builder for chaining.
             */
            public Builder setVertexType(com.google.mediapipe.modules.facegeometry.Mesh3dProto.Mesh3d.VertexType value) {
                copyOnWrite();
                instance.setVertexType(value);
                return this;
            }
            /**
             * <code>optional .mediapipe.face_geometry.Mesh3d.VertexType vertex_type = 1;</code>
             * @return This builder for chaining.
             */
            public Builder clearVertexType() {
                copyOnWrite();
                instance.clearVertexType();
                return this;
            }

            /**
             * <code>optional .mediapipe.face_geometry.Mesh3d.PrimitiveType primitive_type = 2;</code>
             * @return Whether the primitiveType field is set.
             */
            @java.lang.Override
            public boolean hasPrimitiveType() {
                return instance.hasPrimitiveType();
            }
            /**
             * <code>optional .mediapipe.face_geometry.Mesh3d.PrimitiveType primitive_type = 2;</code>
             * @return The primitiveType.
             */
            @java.lang.Override
            public com.google.mediapipe.modules.facegeometry.Mesh3dProto.Mesh3d.PrimitiveType getPrimitiveType() {
                return instance.getPrimitiveType();
            }
            /**
             * <code>optional .mediapipe.face_geometry.Mesh3d.PrimitiveType primitive_type = 2;</code>
             * @param value The enum numeric value on the wire for primitiveType to set.
             * @return This builder for chaining.
             */
            public Builder setPrimitiveType(com.google.mediapipe.modules.facegeometry.Mesh3dProto.Mesh3d.PrimitiveType value) {
                copyOnWrite();
                instance.setPrimitiveType(value);
                return this;
            }
            /**
             * <code>optional .mediapipe.face_geometry.Mesh3d.PrimitiveType primitive_type = 2;</code>
             * @return This builder for chaining.
             */
            public Builder clearPrimitiveType() {
                copyOnWrite();
                instance.clearPrimitiveType();
                return this;
            }

            /**
             * <pre>
             * Vertex buffer size is a multiple of the vertex size (e.g., 5 for
             * VERTEX_PT).
             * </pre>
             *
             * <code>repeated float vertex_buffer = 3;</code>
             * @return A list containing the vertexBuffer.
             */
            @java.lang.Override
            public java.util.List<java.lang.Float>
            getVertexBufferList() {
                return java.util.Collections.unmodifiableList(
                        instance.getVertexBufferList());
            }
            /**
             * <pre>
             * Vertex buffer size is a multiple of the vertex size (e.g., 5 for
             * VERTEX_PT).
             * </pre>
             *
             * <code>repeated float vertex_buffer = 3;</code>
             * @return The count of vertexBuffer.
             */
            @java.lang.Override
            public int getVertexBufferCount() {
                return instance.getVertexBufferCount();
            }
            /**
             * <pre>
             * Vertex buffer size is a multiple of the vertex size (e.g., 5 for
             * VERTEX_PT).
             * </pre>
             *
             * <code>repeated float vertex_buffer = 3;</code>
             * @param index The index of the element to return.
             * @return The vertexBuffer at the given index.
             */
            @java.lang.Override
            public float getVertexBuffer(int index) {
                return instance.getVertexBuffer(index);
            }
            /**
             * <pre>
             * Vertex buffer size is a multiple of the vertex size (e.g., 5 for
             * VERTEX_PT).
             * </pre>
             *
             * <code>repeated float vertex_buffer = 3;</code>
             * @param value The vertexBuffer to set.
             * @return This builder for chaining.
             */
            public Builder setVertexBuffer(
                    int index, float value) {
                copyOnWrite();
                instance.setVertexBuffer(index, value);
                return this;
            }
            /**
             * <pre>
             * Vertex buffer size is a multiple of the vertex size (e.g., 5 for
             * VERTEX_PT).
             * </pre>
             *
             * <code>repeated float vertex_buffer = 3;</code>
             * @param value The vertexBuffer to add.
             * @return This builder for chaining.
             */
            public Builder addVertexBuffer(float value) {
                copyOnWrite();
                instance.addVertexBuffer(value);
                return this;
            }
            /**
             * <pre>
             * Vertex buffer size is a multiple of the vertex size (e.g., 5 for
             * VERTEX_PT).
             * </pre>
             *
             * <code>repeated float vertex_buffer = 3;</code>
             * @param values The vertexBuffer to add.
             * @return This builder for chaining.
             */
            public Builder addAllVertexBuffer(
                    java.lang.Iterable<? extends java.lang.Float> values) {
                copyOnWrite();
                instance.addAllVertexBuffer(values);
                return this;
            }
            /**
             * <pre>
             * Vertex buffer size is a multiple of the vertex size (e.g., 5 for
             * VERTEX_PT).
             * </pre>
             *
             * <code>repeated float vertex_buffer = 3;</code>
             * @return This builder for chaining.
             */
            public Builder clearVertexBuffer() {
                copyOnWrite();
                instance.clearVertexBuffer();
                return this;
            }

            /**
             * <pre>
             * Index buffer size is a multiple of the primitive size (e.g., 3 for
             * TRIANGLE).
             * </pre>
             *
             * <code>repeated uint32 index_buffer = 4;</code>
             * @return A list containing the indexBuffer.
             */
            @java.lang.Override
            public java.util.List<java.lang.Integer>
            getIndexBufferList() {
                return java.util.Collections.unmodifiableList(
                        instance.getIndexBufferList());
            }
            /**
             * <pre>
             * Index buffer size is a multiple of the primitive size (e.g., 3 for
             * TRIANGLE).
             * </pre>
             *
             * <code>repeated uint32 index_buffer = 4;</code>
             * @return The count of indexBuffer.
             */
            @java.lang.Override
            public int getIndexBufferCount() {
                return instance.getIndexBufferCount();
            }
            /**
             * <pre>
             * Index buffer size is a multiple of the primitive size (e.g., 3 for
             * TRIANGLE).
             * </pre>
             *
             * <code>repeated uint32 index_buffer = 4;</code>
             * @param index The index of the element to return.
             * @return The indexBuffer at the given index.
             */
            @java.lang.Override
            public int getIndexBuffer(int index) {
                return instance.getIndexBuffer(index);
            }
            /**
             * <pre>
             * Index buffer size is a multiple of the primitive size (e.g., 3 for
             * TRIANGLE).
             * </pre>
             *
             * <code>repeated uint32 index_buffer = 4;</code>
             * @param value The indexBuffer to set.
             * @return This builder for chaining.
             */
            public Builder setIndexBuffer(
                    int index, int value) {
                copyOnWrite();
                instance.setIndexBuffer(index, value);
                return this;
            }
            /**
             * <pre>
             * Index buffer size is a multiple of the primitive size (e.g., 3 for
             * TRIANGLE).
             * </pre>
             *
             * <code>repeated uint32 index_buffer = 4;</code>
             * @param value The indexBuffer to add.
             * @return This builder for chaining.
             */
            public Builder addIndexBuffer(int value) {
                copyOnWrite();
                instance.addIndexBuffer(value);
                return this;
            }
            /**
             * <pre>
             * Index buffer size is a multiple of the primitive size (e.g., 3 for
             * TRIANGLE).
             * </pre>
             *
             * <code>repeated uint32 index_buffer = 4;</code>
             * @param values The indexBuffer to add.
             * @return This builder for chaining.
             */
            public Builder addAllIndexBuffer(
                    java.lang.Iterable<? extends java.lang.Integer> values) {
                copyOnWrite();
                instance.addAllIndexBuffer(values);
                return this;
            }
            /**
             * <pre>
             * Index buffer size is a multiple of the primitive size (e.g., 3 for
             * TRIANGLE).
             * </pre>
             *
             * <code>repeated uint32 index_buffer = 4;</code>
             * @return This builder for chaining.
             */
            public Builder clearIndexBuffer() {
                copyOnWrite();
                instance.clearIndexBuffer();
                return this;
            }

            // @@protoc_insertion_point(builder_scope:mediapipe.face_geometry.Mesh3d)
        }
        @java.lang.Override
        @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
        protected final java.lang.Object dynamicMethod(
                com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
                java.lang.Object arg0, java.lang.Object arg1) {
            switch (method) {
                case NEW_MUTABLE_INSTANCE: {
                    return new com.google.mediapipe.modules.facegeometry.Mesh3dProto.Mesh3d();
                }
                case NEW_BUILDER: {
                    return new Builder();
                }
                case BUILD_MESSAGE_INFO: {
                    java.lang.Object[] objects = new java.lang.Object[] {
                            "bitField0_",
                            "vertexType_",
                            com.google.mediapipe.modules.facegeometry.Mesh3dProto.Mesh3d.VertexType.internalGetVerifier(),
                            "primitiveType_",
                            com.google.mediapipe.modules.facegeometry.Mesh3dProto.Mesh3d.PrimitiveType.internalGetVerifier(),
                            "vertexBuffer_",
                            "indexBuffer_",
                    };
                    java.lang.String info =
                            "\u0001\u0004\u0000\u0001\u0001\u0004\u0004\u0000\u0002\u0000\u0001\f\u0000\u0002" +
                                    "\f\u0001\u0003\u0013\u0004\u001d";
                    return newMessageInfo(DEFAULT_INSTANCE, info, objects);
                }
                // fall through
                case GET_DEFAULT_INSTANCE: {
                    return DEFAULT_INSTANCE;
                }
                case GET_PARSER: {
                    com.google.protobuf.Parser<com.google.mediapipe.modules.facegeometry.Mesh3dProto.Mesh3d> parser = PARSER;
                    if (parser == null) {
                        synchronized (com.google.mediapipe.modules.facegeometry.Mesh3dProto.Mesh3d.class) {
                            parser = PARSER;
                            if (parser == null) {
                                parser =
                                        new DefaultInstanceBasedParser<com.google.mediapipe.modules.facegeometry.Mesh3dProto.Mesh3d>(
                                                DEFAULT_INSTANCE);
                                PARSER = parser;
                            }
                        }
                    }
                    return parser;
                }
                case GET_MEMOIZED_IS_INITIALIZED: {
                    return (byte) 1;
                }
                case SET_MEMOIZED_IS_INITIALIZED: {
                    return null;
                }
            }
            throw new UnsupportedOperationException();
        }


        // @@protoc_insertion_point(class_scope:mediapipe.face_geometry.Mesh3d)
        private static final com.google.mediapipe.modules.facegeometry.Mesh3dProto.Mesh3d DEFAULT_INSTANCE;
        static {
            Mesh3d defaultInstance = new Mesh3d();
            // New instances are implicitly immutable so no need to make
            // immutable.
            DEFAULT_INSTANCE = defaultInstance;
            com.google.protobuf.GeneratedMessageLite.registerDefaultInstance(
                    Mesh3d.class, defaultInstance);
        }

        public static com.google.mediapipe.modules.facegeometry.Mesh3dProto.Mesh3d getDefaultInstance() {
            return DEFAULT_INSTANCE;
        }

        private static volatile com.google.protobuf.Parser<Mesh3d> PARSER;

        public static com.google.protobuf.Parser<Mesh3d> parser() {
            return DEFAULT_INSTANCE.getParserForType();
        }
    }


    static {
    }

    // @@protoc_insertion_point(outer_class_scope)
}
